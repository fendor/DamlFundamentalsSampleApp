module Main where

template GuineaPig 
  with
    name: Text
    id: Text
    ancestorId: Optional Text
    owner: Party
    public: Party
  where
    signatory owner
    observer owner, public
    key (owner, id): (Party, Text)
    maintainer key._1

    choice ChangeOwner: ContractId GuineaPig
      with 
        newOwner: Party
      controller
        owner, newOwner
      do
        create this with
          owner = newOwner
    
    -- GuineaPigs are notouriously quick in producing offspring.
    -- We didn't pay enough attention, and suddenly, there is new offspring!
    -- But we don't know both parents, just one.
    nonconsuming choice UnexpectedOffspring: ContractId GuineaPig
      with
        animalName: Text
        animalId: Text
        public: Party
      controller owner
      do
        create GuineaPig with
          id = animalId
          name = animalName
          ancestorId = Some this.id
          owner = this.owner
          public

-- guinea pigs need to be paired to produce proper offspring.
-- Guinea pigs are not monogamous, so each guinea pig may be part of multiple couples
-- all the time.
template CoupleRequest
  with
    animal1: Text
    animal2: Text
    owner1: Party
    owner2: Party

  where
    signatory owner1
    observer owner1, owner2

    -- a guinea pig cannot be a couple by itself
    ensure animal1 /= animal2

    choice ProposeCoupleRequest: ContractId CoupleRequest
      controller owner1
      do 
        create this

    choice AcceptCoupleRequest: ContractId Couple
      controller
        owner2
      do
        -- Let's make sure both guinea pigs actually exist and belong
        -- to the linked owners.
        fetchByKey @GuineaPig (owner1, animal1)
        fetchByKey @GuineaPig (owner2, animal2)
        create Couple with
          ..

    choice RefuseCoupleRequest: ()
      controller
        owner2
      do
        return ()
    
    choice AbortCoupleRequest: ()
      controller
        owner1
      do
        return ()

-- Once we have a couple, they may produce offspring.
template Couple
  with
    animal1: Text
    animal2: Text
    owner1: Party
    owner2: Party
  where
    signatory owner1, owner2
    observer owner1, owner2
    ensure animal1 /= animal2

    nonconsuming choice CreateOffspring: ContractId GuineaPig
      with
        animalName: Text
        animalId : Text
        public: Party
      controller owner1, owner2
      do
        -- both animals need to exist and be alive
        (_, ancestor) <- fetchByKey @GuineaPig (owner1, animal1)
        fetchByKey @GuineaPig (owner2, animal2)
        create GuineaPig with
          name = animalName
          id = animalId
          ancestorId = Some ancestor.id
          owner = owner1
          public

    -- Either owner may break up the couple
    choice SplitUp1: ()
      controller owner1
      do
        return ()

    -- Either owner may break up the couple
    choice SplitUp2: ()
      controller owner2
      do
        return ()
