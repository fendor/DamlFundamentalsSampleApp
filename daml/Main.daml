module Main where

template GuineaPig 
  with
    name: Text
    id: Text
    ancestorId: Optional Text
    owner: Party
  where
    signatory owner
    key (owner, id): (Party, Text)
    maintainer key._1

    choice PassedAway: ()
      controller
        owner
      do
        return ()

    choice ChangeOwner: ContractId GuineaPig
      with 
        newOwner: Party
      controller
        owner
      do
        create this with
          owner = newOwner
    
    -- GuineaPigs are notouriously quick in producing offspring.
    -- We didn't pay enough attention, and suddenly, there is new offspring!
    -- But we don't know both parents, just one.
    nonconsuming choice UnexpectedOffspring: ContractId GuineaPig
      with
        animalName: Text
        animalId: Text
      controller owner
      do
        create GuineaPig with
          id = animalId
          name = animalName
          ancestorId = Some this.id
          owner = this.owner

template CoupleRequest
  with
    animal1: Text
    animal2: Text
    owner1: Party
    owner2: Party

  where
    signatory owner1
    observer owner1, owner2

    ensure animal1 /= animal2

    choice AcceptCoupleRequest: ContractId Couple
      controller
        owner2
      do
        create Couple with
          ..

    choice RefuseCoupleRequest: ()
      controller
        owner2
      do
        return ()
    
    choice AbortCoupleRequest: ()
      controller
        owner1
      do
        return ()

template Couple
  with
    animal1: Text
    animal2: Text
    owner1: Party
    owner2: Party
  where
    signatory owner1, owner2
    observer owner1, owner2
    ensure animal1 /= animal2

    nonconsuming choice CreateOffspring: ContractId GuineaPig
      with
        animalName: Text
        newId : Text
      controller owner1, owner2
      do
        (_, ancestor) <- fetchByKey @GuineaPig (owner1, animal1)
        create GuineaPig with
          name = animalName
          id = newId
          ancestorId = Some ancestor.id
          owner = owner1

    -- Either owner may break up the couple
    choice SplitUp1: ()
      controller owner1
      do
        return ()

    -- Either owner may break up the couple
    choice SplitUp2: ()
      controller owner2
      do
        return ()
